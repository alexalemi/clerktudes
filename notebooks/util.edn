{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns util), :file "notebooks/util.clj", :scope util, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/alexalemi/clerktudes/blob/2ec24ea1e2933fe848c433bc6830b5167ad975ba/notebooks/util.clj"} "notebooks/util.clj" [:<> "@" [:span.tabular-nums "2ec24ea"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title nil, :description nil}, :blocks [{:path [], :nextjournal/value [{:path [0], :nextjournal/value "(ns util\n  (:require [clojure.data.priority-map :refer [priority-map]]))", :nextjournal/render-opts {:loc {:line 1, :end-line 2, :column 1, :end-column 64}, :id "util/anon-expr-5dte54BrdhkkHgovHTuJcsHtnwCCnb-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(import 'java.security.MessageDigest\n        'java.math.BigInteger)", :nextjournal/render-opts {:loc {:line 4, :end-line 5, :column 1, :end-column 31}, :id "util/anon-expr-5drEWcUHnLZyrqtnmx91gxKpnPvzoe-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "java.math.BigInteger", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/anon-expr-5drEWcUHnLZyrqtnmx91gxKpnPvzoe-result-1"}}, :nextjournal/blob-id "5drqfCQnNXXWVAY42Ken7UsjXGSdVK"}, :nextjournal/render-opts {:id "util/anon-expr-5drEWcUHnLZyrqtnmx91gxKpnPvzoe-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn seek\n  \"Returns the first time from coll for which (pred item) returns true.\n   Returns nil if no such item is present or the not-found value if supplied.\"\n  ([pred coll] (seek pred coll nil))\n  ([pred coll not-found]\n   (reduce (fn [_ x] (if (pred x) (reduced x) not-found)) not-found coll)))", :nextjournal/render-opts {:loc {:line 7, :end-line 12, :column 1, :end-column 76}, :id "util/seek-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$seek 0x75ae7744 \"util$seek@75ae7744\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/seek-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/seek-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn md5 [^String s]\n  (let [algorithm (MessageDigest/getInstance \"MD5\")\n        raw (.digest algorithm (.getBytes s))]\n    (format \"%032x\" (BigInteger. 1 raw))))", :nextjournal/render-opts {:loc {:line 14, :end-line 17, :column 1, :end-column 43}, :id "util/md5-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$md5 0x160a5e87 \"util$md5@160a5e87\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/md5-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/md5-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn fixed-point [seq]\n  (reduce #(if (= %1 %2) (reduced %1) %2) seq))", :nextjournal/render-opts {:loc {:line 19, :end-line 20, :column 1, :end-column 48}, :id "util/fixed-point-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$fixed_point 0xb525509 \"util$fixed_point@b525509\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/fixed-point-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/fixed-point-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def QUEUE clojure.lang.PersistentQueue/EMPTY)", :nextjournal/render-opts {:loc {:line 22, :end-line 22, :column 1, :end-column 47}, :id "util/QUEUE-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [], :nextjournal/viewer {:name nextjournal.clerk.viewer/sequential-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "(", :closing-paren (")"), :page-size 20, :hash "5dsgY1QgV2KqnvvrRRC3HXgCeF3Qge"}, :nextjournal/render-opts {:id "util/QUEUE-result-1"}}, :nextjournal/blob-id "5dsnkMNEAuAtf1pw9maPnzUbWn8SxF"}, :nextjournal/render-opts {:id "util/QUEUE-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn queue? [x] (instance? clojure.lang.PersistentQueue x))", :nextjournal/render-opts {:loc {:line 24, :end-line 24, :column 1, :end-column 61}, :id "util/queue?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$queue_QMARK_ 0x61c9e646 \"util$queue_QMARK_@61c9e646\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/queue?-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/queue?-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn queue\n  ([] (QUEUE))\n  ([coll] (reduce conj QUEUE coll)))", :nextjournal/render-opts {:loc {:line 26, :end-line 28, :column 1, :end-column 37}, :id "util/queue-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$queue 0x4dccaef5 \"util$queue@4dccaef5\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/queue-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/queue-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(deftype Bag [^clojure.lang.IPersistentMap m\n              ^long n]\n  clojure.lang.IPersistentSet\n  (get [_ k]\n    (if (contains? m k) k nil))\n  (contains [_ k]\n    (contains? m k))\n  (disjoin [_ k]\n    (Bag. (if (= 1 (m k)) (dissoc m k) (update m k dec))\n          (dec n)))\n\n  clojure.lang.IPersistentCollection\n  (count [_]\n    n)\n  (empty [_]\n    (Bag. (.empty m) 0))\n  (cons [_ k]\n    (Bag. (assoc m k (inc (get m k 0)))\n          (inc n)))\n  (equiv [_ o]\n    (and (isa? (class o) Bag)\n         (= n (.n ^Bag o))\n         (.equiv m (.m ^Bag o))))\n\n  clojure.lang.Seqable\n  (seq [_] (mapcat repeat (vals m) (keys m))))", :nextjournal/render-opts {:loc {:line 30, :end-line 55, :column 1, :end-column 47}, :id "util/->Bag-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "util.Bag", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/->Bag-result-1"}}, :nextjournal/blob-id "5dtUCdGivJ9SUNjeuMrxWQN72ZShWX"}, :nextjournal/render-opts {:id "util/->Bag-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn bag\n  [& keys]\n  (Bag. (frequencies keys)\n        (count keys)))", :nextjournal/render-opts {:loc {:line 57, :end-line 60, :column 1, :end-column 23}, :id "util/bag-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$bag 0x75ed8f59 \"util$bag@75ed8f59\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/bag-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/bag-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn distinct-by\n  \"Returns a stateful transducer that removes elements by calling f on each step as a uniqueness key.\n   Returns a lazy sequence when provided with a collection.\"\n  ([f]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (let [v (f input)]\n            (if (contains? @seen v)\n              result\n              (do (vswap! seen conj v)\n                  (rf result input)))))))))\n  ([f xs]\n   (sequence (distinct-by f) xs)))", :nextjournal/render-opts {:loc {:line 62, :end-line 78, :column 1, :end-column 35}, :id "util/distinct-by-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$distinct_by 0x5d9d7f05 \"util$distinct_by@5d9d7f05\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/distinct-by-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/distinct-by-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn reconstruct-path\n  \"Knowing the parent of each node, construct the full path.\"\n  [came-from current]\n  (loop [current current\n         path (list current)]\n    (let [prev (came-from current)]\n      (if prev\n        (recur prev (conj path prev))\n        path))))", :nextjournal/render-opts {:loc {:line 80, :end-line 88, :column 1, :end-column 17}, :id "util/reconstruct-path-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$reconstruct_path 0x73484926 \"util$reconstruct_path@73484926\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/reconstruct-path-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/reconstruct-path-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn a-star\n  \"General A-star algorithm.\"\n  [start goal? cost neighbors heuristic]\n  (loop [frontier (priority-map start (heuristic start))\n         current :start\n         came-from (transient {})\n         best-score (transient {start 0})\n         neighs '()]\n    (let [neigh (first neighs)]\n      ;; (println \"current=\" current \" frontier=\" frontier \" neighs=\" neighs \" neigh=\" neigh \" best-score=\" best-score \" came-from=\" came-from)\n      (cond\n        (and (empty? frontier) (empty? neighs)) :failure\n        (and (not= current :start) (goal? current)) (reconstruct-path (persistent! came-from) current)\n        (empty? neighs)\n        (let [[next _] (peek frontier)]\n          (recur\n           (pop frontier)\n           next\n           came-from\n           best-score\n           (neighbors next)))\n        :else\n        (let [score (best-score current)\n              neigh-cost ((cost current) neigh)\n              tentative-score (+ neigh-cost score)\n              prev-score (get best-score neigh ##Inf)\n              f-score (+ tentative-score (heuristic neigh))]\n          ;; (println \"neigh-cost=\" neigh-cost \" tentative-score=\" tentative-score \" prev-score=\" prev-score \" f-score=\" f-score)\n          (if (< tentative-score prev-score)\n            (recur\n             (assoc frontier neigh f-score)\n             current\n             (assoc! came-from neigh current)\n             (assoc! best-score neigh tentative-score)\n             (rest neighs))\n            (recur\n             frontier\n             current\n             came-from\n             best-score\n             (rest neighs))))))))", :nextjournal/render-opts {:loc {:line 90, :end-line 130, :column 1, :end-column 34}, :id "util/a-star-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[util$a_star 0x5b5beabc \"util$a_star@5b5beabc\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "util/a-star-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "util/a-star-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(comment\n  (a-star\n   :a\n   #(= % :d)\n   {:a {:b 1 :f 10}\n    :b {:a 1 :c 1 :e 10}\n    :c {:b 1 :d 1}\n    :f {:a 10 :e 1}\n    :e {:f 1 :d 1 :b 10}\n    :d {:e 1 :c 1}}\n   {:a #{:b :f}\n    :b #{:a :e :c}\n    :c #{:b :d}\n    :d #{:c :e}\n    :e #{:d :b :f}\n    :f #{:a :e}}\n   (constantly 1)))", :nextjournal/render-opts {:loc {:line 132, :end-line 148, :column 1, :end-column 20}, :id "util/anon-expr-5drtfPGL5SJwWBkcAT4Ma94WZyazSq-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value nil, :nextjournal/viewer {:name nextjournal.clerk.viewer/nil-viewer, :render-fn #viewer-fn (fn [_] [:span.cmt-default.inspected-value "nil"]), :hash "5ds5uDqqy4yJDMFDdH4gQZN84hJLZM"}, :nextjournal/render-opts {:id "util/anon-expr-5drtfPGL5SJwWBkcAT4Ma94WZyazSq-result-1"}}, :nextjournal/blob-id "5dtXKUkx1tJ9DeQi71j6zfiSuGWatd"}, :nextjournal/render-opts {:id "util/anon-expr-5drtfPGL5SJwWBkcAT4Ma94WZyazSq-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}